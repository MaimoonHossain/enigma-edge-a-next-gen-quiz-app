// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int          @id @default(autoincrement())
  email     String       @unique
  password  String
  username  String       @unique
  role      String
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt
  Quiz      Quiz[]
  results   QuizResult[]
}

model Quiz {
  id        Int          @id @default(autoincrement())
  title     String
  ownerId   Int // Assuming a quiz belongs to a user
  owner     User         @relation(fields: [ownerId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt
  questions Question[]
  attempts  QuizResult[]
}

model Question {
  id            Int      @id @default(autoincrement())
  quizId        Int
  quiz          Quiz     @relation(fields: [quizId], references: [id])
  type          String
  questionText  String
  options       String[]
  correctOption Int?
}

model QuizResult {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  username   String
  quizId     Int
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  percentage Float // Percentage achieved by the student
  status     String // 'failed' or 'passed'
  createdAt  DateTime @default(now()) // Represents the first attempt
  updatedAt  DateTime @updatedAt // Represents the last attempt
}
